<template>
  <div>
    <div id="index_user_header">
      <div id="index_user_header_left">
        <a-avatar :size="72" icon="user" />
        <span :style="{ display: 'flex', flexDirection: 'column', justifyContent: 'center', marginLeft: '24px' }">
          <span id="index_user_header_left_wel">{{welcomeTime}}，{{nickName}}，欢迎登录天原集团危化品车辆管理系统</span>
          <span id="index_user_header_left_ps">管理员</span>
        </span>
      </div>
    </div>
    <div id="index_user_content">
      <a-row :gutter="16">
        <a-col :span="8">
          <a-card title="运输类型(月)" hoverable>
            <a-month-picker @change="monthPieChange" slot="extra" placeholder="选择日期" :defaultValue="$moment()"/>
            <div ref="monthPieChart" style="width:100%;height:150px"></div>
          </a-card>
        </a-col>
        <a-col :span="8">
          <a-card title="运输类型(周)" hoverable>
            <a-week-picker @change="weekPieChange" slot="extra" placeholder="选择日期" :defaultValue="$moment()"/>
            <div ref="weekPieChart" style="width:100%;height:150px"></div>
          </a-card>
        </a-col>
        <a-col :span="8">
          <a-card title="运输类型(天)" hoverable>
            <a-date-picker @change="dayPieChange" slot="extra" placeholder="选择日期" :defaultValue="$moment()"/>
            <div ref="dayPieChart" style="width:100%;height:150px"></div>
          </a-card>
        </a-col>
      </a-row>
      <a-row :gutter="16" style="marginTop:22px">
        <a-col :span="24">
          <a-card title="车辆信息(月)" hoverable>
            <a-month-picker @change="monthLineChange" slot="extra" placeholder="选择日期" :defaultValue="$moment()"/>
            <div ref="monthBrokenLineChart" style="width:100%;height:200px"></div>
          </a-card> 
        </a-col>
      </a-row>
      <a-row :gutter="16" style="marginTop:22px">
        <a-col :span="12">
          <a-card title="车辆信息(周)" hoverable>
            <a-week-picker @change="weekLineChange" slot="extra" placeholder="选择日期" :defaultValue="$moment()"/>
            <div ref="weekBrokenLineChart" style="width:100%;height:200px"></div>
          </a-card> 
        </a-col>
        <a-col :span="12">
          <a-card title="车辆信息(天)" hoverable>
            <a-date-picker @change="dayLineChange" slot="extra" placeholder="选择日期" :defaultValue="$moment()"/>
            <div ref="dayBrokenLineChart" style="width:100%;height:200px"></div>
          </a-card> 
        </a-col>
      </a-row>
    </div>
  </div>
</template>

<script>
const echarts = require('echarts')
const lineChartOptions = {
  tooltip: {
    trigger: 'axis'
  },
  grid: {
    left: '3%',
    right: '4%',
    bottom: '3%',
    containLabel: true
  },
  toolbox: {
    feature: {
      saveAsImage: {
        title: '保存'
      }
    }
  },
  xAxis: {
    type: 'category',
    boundaryGap: false,
    data: []
  },
  yAxis: {
    type: 'value',
    axisLabel: {formatter:'{value} 辆'}
  }
}
const pieChartOptions = {
  tooltip : {
    trigger: 'item',
    formatter: "{a} <br/>{b} : {c} ({d}%)"
  },
  legend: {
    orient: 'vertical',
    left: 'left',
    data: [],
  },
  toolbox: {
    right: '20',
    feature: {
      saveAsImage: {}
    }
  },
  series : [{
    name: '运输类型',
    type: 'pie',
    radius : '55%',
    center: ['50%', '60%'],
    data: [],
    itemStyle: {
      emphasis: {
        shadowBlur: 10,
        shadowOffsetX: 0,
        shadowColor: 'rgba(0, 0, 0, 0.5)'
      }
    }
  }]
}
export default {
  data () {
    return {
      pieChartDay: null,
      pieChartWeek: null,
      pieChartMonth: null,
      lineChartDay: null,
      lineChartWeek: null,
      lineChartMonth: null,
      nickName: '',
      welcomeTime: '早上好',
      screenWidth: document.body.clientWidth
    };
  },

  components: {},

  created(){
    this.getTime();
    let role = sessionStorage.getItem('account');
    this.nickName = role
  },

  mounted(){
    let date = this.$moment() //当前时间
    this.pieChartDay = echarts.init(this.$refs.dayPieChart)
    this.pieChartDay.setOption(pieChartOptions)
    this.pieChartWeek = echarts.init(this.$refs.weekPieChart)
    this.pieChartWeek.setOption(pieChartOptions)
    this.pieChartMonth = echarts.init(this.$refs.monthPieChart)
    this.pieChartMonth.setOption(pieChartOptions)
    this.fetchPieData('day', date.unix(), this.pieChartDay, 'dayPieChart')
    this.fetchPieData('week', date.unix(), this.pieChartWeek, 'weekPieChart')
    this.fetchPieData('month', date.unix(), this.pieChartMonth, 'monthPieChart')
    const monthArr = []
    for(let i = 1;i < 32; i++){
      monthArr.push(i)
    }
    const dayArr = []
    for(let i = 0;i < 7; i++){
      dayArr.push(`${i*3}时`)
    }
    this.lineChartDay = echarts.init(this.$refs.dayBrokenLineChart)
    this.lineChartDay.setOption(
      { ...lineChartOptions,
        xAxis: {
          data: dayArr
        }
      }
    )
    this.lineChartWeek = echarts.init(this.$refs.weekBrokenLineChart)
    this.lineChartWeek.setOption(
      { ...lineChartOptions,
        xAxis: {
          data: ['星期一','星期二','星期三','星期四','星期五','星期六','星期日']
        }
      }
    )
    this.lineChartMonth = echarts.init(this.$refs.monthBrokenLineChart)
    this.lineChartMonth.setOption(
      { ...lineChartOptions,
        xAxis: {
          data: monthArr
        }
      }
    )
    this.fetchLineData('day', date.unix(), this.lineChartDay, 'dayBrokenLineChart')
    this.fetchLineData('week', date.unix(), this.lineChartWeek, 'weekBrokenLineChart')
    this.fetchLineData('month', date.unix(), this.lineChartMonth, 'monthBrokenLineChart')
    setTimeout(() => {
      this.pieChartDay.resize();
      this.pieChartWeek.resize();
      this.pieChartMonth.resize();
      this.lineChartDay.resize();
      this.lineChartWeek.resize();
      this.lineChartMonth.resize();
    },100)
    window.onresize = () => {
      return (() => {
        window.screenWidth = document.body.clientWidth
        this.screenWidth = window.screenWidth
      })()
    }
  },

  computed: {},

  methods: {
    dayPieChange(date) {
      this.fetchPieData('day', date && date.unix(), this.pieChartDay, 'dayPieChart')
    },
    weekPieChange(date) {
      this.fetchPieData('week', date && date.unix(), this.pieChartWeek, 'weekPieChart')
    },
    monthPieChange(date) {
      this.fetchPieData('month', date && date.unix(), this.pieChartMonth, 'monthPieChart')
    },
    /**
     * 请求饼图数据
     * @param timeUnit 时间单位：day, week, month, all
     * @param timeStamp 时间戳
     * @param pieChart 实例
     * @param ref 容器节点
     */
    fetchPieData(timeUnit,timeStamp,pieChart,ref){
      let data = [], seriesData = [], legendData = []
      this.$api.chart.pieChart({
        timeUnit: timeUnit,
        timeStamp: timeStamp
      }).then(res => {
        if (res.code === 200) {
          data = res.data[ref]
          if(data.length !== 0){
            data.forEach((item, index) => {
              seriesData[index] = {
                value: item.number,
                name: item.typeName
              }
              legendData[index] = item.typeName
            });
            pieChart.setOption({
              legend: {
                data: legendData
              },
              series: [{
                data: seriesData
              }]
            })
          } else {
            pieChart.setOption({
              title: {
                text: '无数据',
              },
              legend: {
                data: []
              },
              series: [{
                data: []
              }]
            })
          }
        } else {
          this.$message.error(res.message)
        }
      })
    },
    monthLineChange(date) {
      this.fetchLineData('month', date && date.unix(), this.lineChartMonth, 'monthBrokenLineChart')
    },
    weekLineChange(date) {
      this.fetchLineData('week', date && date.unix(), this.lineChartWeek, 'weekBrokenLineChart')
    },
    dayLineChange(date) {
      this.fetchLineData('day', date && date.unix(), this.lineChartDay, 'dayBrokenLineChart')
    },
    /**
     * 请求折线图数据
     * @param timeUnit 时间单位：day, week, month, all
     * @param timeStamp 时间戳
     * @param lineChart 实例
     * @param ref 容器节点
     */
    fetchLineData(timeUnit, timeStamp, lineChart, ref){
      let data = []
      this.$api.chart.lineChart({
        timeUnit: timeUnit,
        timeStamp: timeStamp
      }).then(res => {
        if (res.code === 200) {
          data = res.data[ref]
          if(data && data !== null){
            let sumNum = [], abNomalNum = [], nomalNum = []
            Object.keys(data).map(key => {
              sumNum.push(data[key].sumNum)
              abNomalNum.push(data[key].abNomalNum)
              nomalNum.push(data[key].nomalNum)
            })
            lineChart.setOption({
              legend: {
                data:['总车次', '正常车次', '异常车次']
              },
              series: [{
                name: '总车次',
                type: 'line',
                stack: '总车次',
                data: sumNum
              }, {
                name: '正常车次',
                type: 'line',
                stack: '正常车次',
                data: nomalNum
              }, {
                name: '异常车次',
                type: 'line',
                stack: '异常车次',
                data: abNomalNum
              }]
            })
          } else {
            lineChart.setOption({
              title: {
                text: '无数据',
              },
              legend: {
                data: []
              },
              series: [{
                data: []
              }]
            })
          }
        } else {
          this.$message.error(res.message)
        }
      })
    },
    getTime(){
      let now = new Date();
        let hour = now.getHours();
        if(hour < 9){
        this.welcomeTime = '早上好'
        }else if(hour < 12){
          this.welcomeTime = '上午好'
        }else if(hour < 14){
          this.welcomeTime = '中午好'
        }else if(hour < 17){
          this.welcomeTime = '下午好'
        }else {
          this.welcomeTime = '晚上好'
        }
    },
    onChange(){
      
    }
  },
  watch: {
    screenWidth(val){
      if(!this.timer){
        this.screenWidth = val;
        this.timer = true;
        setTimeout(()=> {
          this.pieChartDay.resize();
          this.pieChartWeek.resize();
          this.pieChartMonth.resize();
          this.lineChartDay.resize();
          this.lineChartWeek.resize();
          this.lineChartMonth.resize();
          this.timer = false;
        },300)
      }
    }
  }
}

</script>
<style scoped>
  #index_user_header {
    height: 80px;
    background: #fff
  }
  #index_user_header_left {
    display: flex;
    flex-direction: row;
    align-content: center;
  }
  #index_user_header_left_wel{
    margin-bottom: 12px;
    color: rgba(0,0,0,.85);
    font-weight: 500;
    font-size: 20px;
    line-height: 28px;
  }
  #index_user_header_left_ps{
    color: rgba(0,0,0,.45);
    line-height: 22px;
  }
  #index_user_content {
    padding-top: 24px;
    background: #fff;
    margin-top: 14px;
    border-top: 1px solid #e8e8e8
  }
</style>